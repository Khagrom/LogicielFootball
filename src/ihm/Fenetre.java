/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ihm;

import calcul.BDD;
import calcul.Main;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author p1513113
 */
public final class Fenetre extends javax.swing.JFrame {

    /**
     * Creates new form Fenetre
     *
     * @throws java.lang.Exception
     */
    public Fenetre() throws Exception {
        initComponents();
        initTableChampionnat();

        BDD cnx = new BDD();

        remplirComboBox(cnx, cbChampionnat, "SELECT nom FROM championnat where nom != \"Autres\";");

        cnx.closeConnection();

    }

    public JFrame getMainFrame() {
        return this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tabbedPane = new javax.swing.JTabbedPane();
        pannelChampionnat = new javax.swing.JPanel();
        cbChampionnat = new javax.swing.JComboBox();
        cbJourneeChampionnat = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableChampionnat = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableClassement = new javax.swing.JTable();
        panelCoupeNationale = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelCoupeEurope = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        cbChampionnat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbChampionnatActionPerformed(evt);
            }
        });

        cbJourneeChampionnat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbJourneeChampionnatActionPerformed(evt);
            }
        });

        tableChampionnat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Domicile", "Extérieur", "Score", "Édition"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableChampionnat.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tableChampionnat);
        if (tableChampionnat.getColumnModel().getColumnCount() > 0) {
            tableChampionnat.getColumnModel().getColumn(0).setResizable(false);
            tableChampionnat.getColumnModel().getColumn(1).setResizable(false);
            tableChampionnat.getColumnModel().getColumn(2).setMinWidth(50);
            tableChampionnat.getColumnModel().getColumn(2).setPreferredWidth(50);
            tableChampionnat.getColumnModel().getColumn(2).setMaxWidth(50);
            tableChampionnat.getColumnModel().getColumn(3).setMinWidth(100);
            tableChampionnat.getColumnModel().getColumn(3).setPreferredWidth(100);
            tableChampionnat.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        tableClassement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pos.", "Club", "BP", "BC", "Diff.", "Points"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableClassement);
        if (tableClassement.getColumnModel().getColumnCount() > 0) {
            tableClassement.getColumnModel().getColumn(0).setMinWidth(45);
            tableClassement.getColumnModel().getColumn(0).setPreferredWidth(45);
            tableClassement.getColumnModel().getColumn(0).setMaxWidth(45);
            tableClassement.getColumnModel().getColumn(1).setResizable(false);
            tableClassement.getColumnModel().getColumn(2).setMinWidth(45);
            tableClassement.getColumnModel().getColumn(2).setPreferredWidth(45);
            tableClassement.getColumnModel().getColumn(2).setMaxWidth(45);
            tableClassement.getColumnModel().getColumn(3).setMinWidth(45);
            tableClassement.getColumnModel().getColumn(3).setPreferredWidth(45);
            tableClassement.getColumnModel().getColumn(3).setMaxWidth(45);
            tableClassement.getColumnModel().getColumn(4).setMinWidth(45);
            tableClassement.getColumnModel().getColumn(4).setPreferredWidth(45);
            tableClassement.getColumnModel().getColumn(4).setMaxWidth(45);
            tableClassement.getColumnModel().getColumn(5).setMinWidth(45);
            tableClassement.getColumnModel().getColumn(5).setPreferredWidth(45);
            tableClassement.getColumnModel().getColumn(5).setMaxWidth(45);
        }

        javax.swing.GroupLayout pannelChampionnatLayout = new javax.swing.GroupLayout(pannelChampionnat);
        pannelChampionnat.setLayout(pannelChampionnatLayout);
        pannelChampionnatLayout.setHorizontalGroup(
            pannelChampionnatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelChampionnatLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(pannelChampionnatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbChampionnat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pannelChampionnatLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pannelChampionnatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                            .addComponent(cbJourneeChampionnat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(6, 6, 6))
        );
        pannelChampionnatLayout.setVerticalGroup(
            pannelChampionnatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pannelChampionnatLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(cbChampionnat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(pannelChampionnatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pannelChampionnatLayout.createSequentialGroup()
                        .addComponent(cbJourneeChampionnat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(6, 6, 6))
        );

        tabbedPane.addTab("Championnat", pannelChampionnat);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setText("Work in progress");

        javax.swing.GroupLayout panelCoupeNationaleLayout = new javax.swing.GroupLayout(panelCoupeNationale);
        panelCoupeNationale.setLayout(panelCoupeNationaleLayout);
        panelCoupeNationaleLayout.setHorizontalGroup(
            panelCoupeNationaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCoupeNationaleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(626, Short.MAX_VALUE))
        );
        panelCoupeNationaleLayout.setVerticalGroup(
            panelCoupeNationaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCoupeNationaleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(405, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Coupe Nationale", panelCoupeNationale);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel2.setText("Work in progress");

        javax.swing.GroupLayout panelCoupeEuropeLayout = new javax.swing.GroupLayout(panelCoupeEurope);
        panelCoupeEurope.setLayout(panelCoupeEuropeLayout);
        panelCoupeEuropeLayout.setHorizontalGroup(
            panelCoupeEuropeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCoupeEuropeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(626, Short.MAX_VALUE))
        );
        panelCoupeEuropeLayout.setVerticalGroup(
            panelCoupeEuropeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCoupeEuropeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(405, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Coupe d'Europe", panelCoupeEurope);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbChampionnatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbChampionnatActionPerformed
        try {
            BDD cnx = new BDD();
            String queryDate = "select distinct date from rencontre, championnat "
                    + "where rencontre.idCompetition = championnat.id and nom = \"" + cbChampionnat.getSelectedItem().toString() + "\" "
                    + "order by date asc;";
            remplirComboBox(cnx, cbJourneeChampionnat, queryDate);
            cnx.closeConnection();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cbChampionnatActionPerformed

    private void cbJourneeChampionnatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbJourneeChampionnatActionPerformed
        try {
            BDD cnx = new BDD();
            String queryJournees = "select equipe1.nom, equipe2.nom, concat_ws(cast(\" - \" as char), cast(butEquipe1 as char), cast(butEquipe2 as char)), cast(\"Modifier\" as char) from equipe as equipe1, equipe as equipe2, rencontre, championnat "
                    + "where rencontre.idEquipe1 = equipe1.id "
                    + "and rencontre.idEquipe2 = equipe2.id "
                    + "and rencontre.idCompetition = championnat.id "
                    + "and championnat.nom = \"" + cbChampionnat.getSelectedItem().toString() + "\" "
                    + "and date = \"" + cbJourneeChampionnat.getSelectedItem().toString() + "\";";
            remplirTable(cnx, tableChampionnat, queryJournees);

            Main.majClassement(2015);
            String queryClassement = "select @rownum := @rownum + 1 as pos, equipe.nom, butPour, butContre, butPour-butContre as diff, points "
                    + "from classement, equipe, championnat "
                    + "cross join (select @rownum := 0) r "
                    + "where classement.idEquipe = equipe.id "
                    + "and annee = 2015 "
                    + "and classement.championnat = championnat.id "
                    + "and championnat.nom = \"" + cbChampionnat.getSelectedItem().toString() + "\" "
                    + "order by points desc, diff desc, butPour desc;";
            remplirTable(cnx, tableClassement, queryClassement);
            cnx.closeConnection();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_cbJourneeChampionnatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fenetre.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Fenetre().setVisible(true);

            } catch (Exception ex) {
                Logger.getLogger(Fenetre.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    public final void remplirComboBox(BDD cnx, JComboBox cb, String Query) throws Exception {
        int count = cb.getItemCount();
        try (ResultSet req = cnx.getStatement().executeQuery(Query)) {
            while (req.next()) {
                cb.addItem(req.getString(1));
            }
        }
        for (int i = 0; i < count; i++) {
            cb.removeItemAt(0);
        }
    }

    public void remplirTable(BDD cnx, JTable table, String Query) throws Exception {
        try (ResultSet rs = cnx.getStatement().executeQuery(Query)) {
            while (table.getRowCount() > 0) {
                ((DefaultTableModel) table.getModel()).removeRow(0);
            }
            int columns = rs.getMetaData().getColumnCount();
            while (rs.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                ((DefaultTableModel) table.getModel()).insertRow(rs.getRow() - 1, row);
            }
        }

        updateRowHeights(table);
    }

    public void updateRowHeights(JTable table) {
        for (int row = 0; row < table.getRowCount(); row++) {
            int rowHeight = table.getRowHeight();

            for (int column = 0; column < table.getColumnCount(); column++) {
                Component comp = table.prepareRenderer(table.getCellRenderer(row, column), row, column);
                rowHeight = Math.max(rowHeight, comp.getPreferredSize().height);
            }

            table.setRowHeight(row, rowHeight);
        }
    }

    public void initTableChampionnat() {
        Action edit = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String nomEquipe1 = tableChampionnat.getModel().getValueAt(tableChampionnat.getSelectedRow(), 0).toString();
                String nomEquipe2 = tableChampionnat.getModel().getValueAt(tableChampionnat.getSelectedRow(), 1).toString();

                JTextField tfEquipe1 = new JTextField(5);
                JTextField tfEquipe2 = new JTextField(5);
                try {
                    tfEquipe1.setText(tableChampionnat.getModel().getValueAt(tableChampionnat.getSelectedRow(), 2).toString().substring(0, 2).trim());
                    tfEquipe2.setText(tableChampionnat.getModel().getValueAt(tableChampionnat.getSelectedRow(), 2).toString().substring((tableChampionnat.getModel().getValueAt(tableChampionnat.getSelectedRow(), 2).toString().length()) - 2).trim());
                } catch (Exception ex)  {
                    tfEquipe1.setText("");
                    tfEquipe2.setText("");
                }
                KeyListener kl = new KeyListener() {
                    @Override
                    public void keyTyped(KeyEvent e) {
                        char c = e.getKeyChar();
                        if (((c < '0') || (c > '9')) && (c != java.awt.event.KeyEvent.VK_BACK_SPACE)) {
                            e.consume();
                        }

                        if (tfEquipe1.getText().length() > 2) {
                            tfEquipe1.setText("");
                        }
                        if (tfEquipe2.getText().length() > 2) {
                            tfEquipe2.setText("");
                        }
                    }

                    @Override
                    public void keyPressed(KeyEvent e) {
                    }

                    @Override
                    public void keyReleased(KeyEvent e) {
                    }
                };

                tfEquipe1.addKeyListener(kl);
                tfEquipe2.addKeyListener(kl);

                JButton btOk = new JButton("Valider");
                JButton btAnnuler = new JButton("Annuler");

                JPanel pText = new JPanel();
                JPanel pButton = new JPanel();
                pText.setLayout(new FlowLayout());
                pText.add(new JLabel(nomEquipe1 + " :"));
                pText.add(tfEquipe1);
                pText.add(new JLabel(nomEquipe2 + " :"));
                pText.add(tfEquipe2);
                pButton.setLayout(new FlowLayout());
                pButton.add(btOk);
                pButton.add(btAnnuler);

                JDialog jd = new JDialog(getMainFrame(), "Édition des scores", Dialog.ModalityType.DOCUMENT_MODAL);
                jd.setLocationRelativeTo(getMainFrame());
                jd.setLayout(new BorderLayout());
                jd.add(pText, BorderLayout.NORTH);
                jd.add(pButton, BorderLayout.SOUTH);

                btAnnuler.addActionListener((ActionEvent ev) -> {
                    jd.dispose();
                });

                btOk.addActionListener((ActionEvent ev) -> {
                    if (tfEquipe1.getText() != null && tfEquipe2.getText() != null) {
                        try {
                            BDD cnx = new BDD();
                            String queryIdMatch = "SELECT rencontre.id FROM rencontre, equipe as equipe1, equipe as equipe2 "
                                    + "WHERE equipe1.id = rencontre.idEquipe1 "
                                    + "AND equipe2.id = rencontre.idEquipe2 "
                                    + "AND equipe1.nom = \"" + tableChampionnat.getModel().getValueAt(tableChampionnat.getSelectedRow(), 0) + "\" "
                                    + "AND equipe2.nom = \"" + tableChampionnat.getModel().getValueAt(tableChampionnat.getSelectedRow(), 1) + "\" "
                                    + "AND date = \"" + cbJourneeChampionnat.getSelectedItem().toString() + "\";";
                            int idMatch = -1;
                            try (ResultSet rs = cnx.getStatement().executeQuery(queryIdMatch)) {
                                while (rs.next()) {
                                    idMatch = rs.getInt("id");
                                }
                            }
                            if (idMatch != -1) {
                                cnx.getStatement().executeUpdate("UPDATE `rencontre` SET `butEquipe1`= " + tfEquipe1.getText() + ",`butEquipe2`= " + tfEquipe2.getText() + " "
                                        + "WHERE `id` = " + idMatch + ";");
                            }
                            String queryJournees = "select equipe1.nom, equipe2.nom, concat_ws(cast(\" - \" as char), cast(butEquipe1 as char), cast(butEquipe2 as char)), cast(\"Modifier\" as char) from equipe as equipe1, equipe as equipe2, rencontre, championnat "
                                    + "where rencontre.idEquipe1 = equipe1.id "
                                    + "and rencontre.idEquipe2 = equipe2.id "
                                    + "and rencontre.idCompetition = championnat.id "
                                    + "and championnat.nom = \"" + cbChampionnat.getSelectedItem().toString() + "\" "
                                    + "and date = \"" + cbJourneeChampionnat.getSelectedItem().toString() + "\";";
                            remplirTable(cnx, tableChampionnat, queryJournees);
                            Main.majClassement(2015);
                            String queryClassement = "select @rownum := @rownum + 1 as pos, equipe.nom, butPour, butContre, butPour-butContre as diff, points "
                                    + "from classement, equipe, championnat "
                                    + "cross join (select @rownum := 0) r "
                                    + "where classement.idEquipe = equipe.id "
                                    + "and annee = 2015 "
                                    + "and classement.championnat = championnat.id "
                                    + "and championnat.nom = \"" + cbChampionnat.getSelectedItem().toString() + "\" "
                                    + "order by points desc, diff desc;";
                            remplirTable(cnx, tableClassement, queryClassement);
                            cnx.closeConnection();
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                        jd.dispose();
                    }
                }
                );

                jd.setResizable(false);
                jd.pack();
                jd.setVisible(true);
            }
        };

        ButtonColumn buttonColumn = new ButtonColumn(tableChampionnat, edit, 3);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tableChampionnat.setDefaultRenderer(Object.class, centerRenderer);
        tableClassement.setDefaultRenderer(Object.class, centerRenderer);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbChampionnat;
    private javax.swing.JComboBox cbJourneeChampionnat;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panelCoupeEurope;
    private javax.swing.JPanel panelCoupeNationale;
    private javax.swing.JPanel pannelChampionnat;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTable tableChampionnat;
    private javax.swing.JTable tableClassement;
    // End of variables declaration//GEN-END:variables
}
